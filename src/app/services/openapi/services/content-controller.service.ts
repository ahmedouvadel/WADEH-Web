/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { ContentDto } from '../models/content-dto';
import { createContent } from '../fn/content-controller/create-content';
import { CreateContent$Params } from '../fn/content-controller/create-content';
import { deleteContent } from '../fn/content-controller/delete-content';
import { DeleteContent$Params } from '../fn/content-controller/delete-content';
import { getAllContents } from '../fn/content-controller/get-all-contents';
import { GetAllContents$Params } from '../fn/content-controller/get-all-contents';
import { getContentById } from '../fn/content-controller/get-content-by-id';
import { GetContentById$Params } from '../fn/content-controller/get-content-by-id';
import { updateContent } from '../fn/content-controller/update-content';
import { UpdateContent$Params } from '../fn/content-controller/update-content';

@Injectable({ providedIn: 'root' })
export class ContentControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getContentById()` */
  static readonly GetContentByIdPath = '/api/contents/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getContentById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getContentById$Response(params: GetContentById$Params, context?: HttpContext): Observable<StrictHttpResponse<ContentDto>> {
    return getContentById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getContentById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getContentById(params: GetContentById$Params, context?: HttpContext): Observable<ContentDto> {
    return this.getContentById$Response(params, context).pipe(
      map((r: StrictHttpResponse<ContentDto>): ContentDto => r.body)
    );
  }

  /** Path part for operation `updateContent()` */
  static readonly UpdateContentPath = '/api/contents/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateContent()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateContent$Response(params: UpdateContent$Params, context?: HttpContext): Observable<StrictHttpResponse<ContentDto>> {
    return updateContent(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateContent$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateContent(params: UpdateContent$Params, context?: HttpContext): Observable<ContentDto> {
    return this.updateContent$Response(params, context).pipe(
      map((r: StrictHttpResponse<ContentDto>): ContentDto => r.body)
    );
  }

  /** Path part for operation `deleteContent()` */
  static readonly DeleteContentPath = '/api/contents/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteContent()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteContent$Response(params: DeleteContent$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteContent(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteContent$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteContent(params: DeleteContent$Params, context?: HttpContext): Observable<void> {
    return this.deleteContent$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getAllContents()` */
  static readonly GetAllContentsPath = '/api/contents';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllContents()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllContents$Response(params?: GetAllContents$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ContentDto>>> {
    return getAllContents(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllContents$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllContents(params?: GetAllContents$Params, context?: HttpContext): Observable<Array<ContentDto>> {
    return this.getAllContents$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ContentDto>>): Array<ContentDto> => r.body)
    );
  }

  /** Path part for operation `createContent()` */
  static readonly CreateContentPath = '/api/contents';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createContent()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createContent$Response(params: CreateContent$Params, context?: HttpContext): Observable<StrictHttpResponse<ContentDto>> {
    return createContent(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createContent$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createContent(params: CreateContent$Params, context?: HttpContext): Observable<ContentDto> {
    return this.createContent$Response(params, context).pipe(
      map((r: StrictHttpResponse<ContentDto>): ContentDto => r.body)
    );
  }

}
