/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addRole } from '../fn/auth-controller/add-role';
import { AddRole$Params } from '../fn/auth-controller/add-role';
import { addUser } from '../fn/auth-controller/add-user';
import { AddUser$Params } from '../fn/auth-controller/add-user';
import { assignRoleToUser } from '../fn/auth-controller/assign-role-to-user';
import { AssignRoleToUser$Params } from '../fn/auth-controller/assign-role-to-user';
import { Role } from '../models/role';
import { User } from '../models/user';

@Injectable({ providedIn: 'root' })
export class AuthControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `addUser()` */
  static readonly AddUserPath = '/api/auth/addUser';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addUser()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addUser$Response(params: AddUser$Params, context?: HttpContext): Observable<StrictHttpResponse<User>> {
    return addUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addUser$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addUser(params: AddUser$Params, context?: HttpContext): Observable<User> {
    return this.addUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<User>): User => r.body)
    );
  }

  /** Path part for operation `addRole()` */
  static readonly AddRolePath = '/api/auth/addRole';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addRole()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addRole$Response(params: AddRole$Params, context?: HttpContext): Observable<StrictHttpResponse<Role>> {
    return addRole(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addRole$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addRole(params: AddRole$Params, context?: HttpContext): Observable<Role> {
    return this.addRole$Response(params, context).pipe(
      map((r: StrictHttpResponse<Role>): Role => r.body)
    );
  }

  /** Path part for operation `assignRoleToUser()` */
  static readonly AssignRoleToUserPath = '/api/auth/addRoleToUser';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `assignRoleToUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  assignRoleToUser$Response(params: AssignRoleToUser$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return assignRoleToUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `assignRoleToUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  assignRoleToUser(params: AssignRoleToUser$Params, context?: HttpContext): Observable<string> {
    return this.assignRoleToUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

}
